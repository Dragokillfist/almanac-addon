[manifest]
version = "1.0.0"
dump_lua = true
priority = -1

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''local new_colour = G.C.WHITE'''
position = "after"
payload = '''level = type(level) == "number" and level or level:to_number()'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''if not no_astronomy and amount > 0 then
		if Jen.hv('astronomy', 9) then
			amount = amount * 5
		elseif Jen.hv('astronomy', 8) then
			amount = amount * 2
		end
	end'''
position = "at"
payload = '''if not no_astronomy and to_big(amount) > to_big(0) then
		if Jen.hv('astronomy', 9) then
			amount = amount * 5
		elseif Jen.hv('astronomy', 8) then
			amount = amount * 2
		end
	end'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''if amount > 0 then
		if #SMODS.find_card('j_jen_guilduryn') > 0 and hand ~= jl.favhand() then
			for k, v in ipairs(G.jokers.cards) do
				if v.gc and v:gc().key == 'j_jen_guilduryn' then
					card_eval_status_text(v, 'extra', nil, nil, nil, {message = 'Redirected!', colour = G.C.MONEY})
					break
				end
			end
			hand = jl.favhand()
			if not instant then
				jl.th(hand)
			end
		end
	end'''
position = "at"
payload = '''if to_big(amount) > to_big(0) then
		if #SMODS.find_card('j_jen_guilduryn') > 0 and hand ~= jl.favhand() then
			for k, v in ipairs(G.jokers.cards) do
				if v.gc and v:gc().key == 'j_jen_guilduryn' then
					card_eval_status_text(v, 'extra', nil, nil, nil, {message = 'Redirected!', colour = G.C.MONEY})
					break
				end
			end
			hand = jl.favhand()
			if not instant then
				jl.th(hand)
			end
		end
	end'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''if amount > 0 then
		add_malice(25 * amount)
	end
	if jl.invalid_number(number_format(G.GAME.hands[hand].level)) then
		G.GAME.hands[hand].level = 1e300
		if not instant then
			update_hand_text({sound = 'button', volume = 0.7, pitch = 0.8, delay = 0.3}, {level=maxfloat})
			delay(0.3)
		end
	end'''
position = "at"
payload = '''if to_big(amount) > to_big(0) then
        add_malice(25 * amount)
    end
    if jl.invalid_number(number_format(G.GAME.hands[hand].level)) then
        G.GAME.hands[hand].level = 1e300
        if not instant then
            update_hand_text({sound = 'button', volume = 0.7, pitch = 0.8, delay = 0.3}, {level=maxfloat})
            delay(0.3)
        end
    end'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''if amount < 0 and Jen.hv('astronomy', 11) and not no_astronomy then
		local refund = math.abs(amount) / 4
		local fav = jl.favhand()
		if Jen.config.verbose_astronomicon then jl.th(fav) end
		fastlv(card, fav, not Jen.config.verbose_astronomicon, refund, true)
	end
	if amount > 0 and Jen.hv('astronomy', 12) and not no_astronomy then
		local dividend = amount / 10
		local fav = jl.favhand()
		if Jen.config.verbose_astronomicon then jl.th(fav) end
		fastlv(card, fav, not Jen.config.verbose_astronomicon, dividend, true)
	end'''
position = "at"
payload = '''if to_big(amount) < to_big(0) and Jen.hv('astronomy', 11) and not no_astronomy then
        local refund = math.abs(amount) / 4
        local fav = jl.favhand()
        if Jen.config.verbose_astronomicon then jl.th(fav) end
        fastlv(card, fav, not Jen.config.verbose_astronomicon, refund, true)
    end
    if to_big(amount) > to_big(0) and Jen.hv('astronomy', 12) and not no_astronomy then
        local dividend = amount / 10
        local fav = jl.favhand()
        if Jen.config.verbose_astronomicon then jl.th(fav) end
        fastlv(card, fav, not Jen.config.verbose_astronomicon, dividend, true)
    end'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''if fusion then
			local can_afford = (Jen.fusions[fusion].cost or 0) <= G.GAME.dollars
			if can_afford and not card.already_notified then
				play_sound('jen_done')
				card:juice_up(0.5, 0.5)
				card.already_notified = true
			elseif not can_afford then
				card.already_notified = false
			end
			card.fusion_ready = can_afford
			card.target_fusion = fusion
			card.fusion_details = fusion .. ' : $' .. number_format(Jen.fusions[fusion].cost or 0)
		elseif #G.jokers.highlighted + math.max(0, #G.consumeables.highlighted - 1) > 0 then
			card.fusion_details = 'No recipe matches selected cards'
			card.already_notified = false
		end'''
position = "at"
payload = '''if fusion then
            local can_afford = to_big(Jen.fusions[fusion].cost or 0) <= to_big(G.GAME.dollars)
            if can_afford and not card.already_notified then
                play_sound('jen_done')
                card:juice_up(0.5, 0.5)
                card.already_notified = true
            elseif not can_afford then
                card.already_notified = false
            end
            card.fusion_ready = can_afford
            card.target_fusion = fusion
            card.fusion_details = fusion .. ' : $' .. number_format(Jen.fusions[fusion].cost or 0)
        elseif #G.jokers.highlighted + math.max(0, #G.consumeables.highlighted - 1) > 0 then
            card.fusion_details = 'No recipe matches selected cards'
            card.already_notified = false
        end'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''	if v.level > 1 then
				levels = levels + math.max(0, v.level - 1)
				level_up_hand(nil, k, true, -v.level + 1, true, true)
			end'''
position = "at"
payload = '''    if to_big(v.level) > to_big(1) then
                levels = levels + math.max(0, v.level - 1)
                level_up_hand(nil, k, true, -v.level + 1, true, true)
            end'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''if G.GAME.hands[fav].level > 0 then
			if hands.backhand then
				card:do_jen_astronomy(hands.backhand, mod)
				jl.th(hands.backhand)
				level_up_hand(card, hands.backhand, nil, mod)
			end
			if hands.forehand then
				card:do_jen_astronomy(hands.forehand, mod)
				jl.th(hands.forehand)
				level_up_hand(card, hands.forehand, nil, mod)
			end
		end'''
position = "at"
payload = '''if to_big(G.GAME.hands[fav].level) > to_big(0) then
            if hands.backhand then
                card:do_jen_astronomy(hands.backhand, mod)
                jl.th(hands.backhand)
                level_up_hand(card, hands.backhand, nil, mod)
            end
            if hands.forehand then
                card:do_jen_astronomy(hands.forehand, mod)
                jl.th(hands.forehand)
                level_up_hand(card, hands.forehand, nil, mod)
            end
        end'''
match_indent = true


[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''SMODS.Edition({
    key = "dithered",
    loc_txt = {
        name = "Dithered",
        label = "Dithered",
        text = {
            "{C:red}#1#{} Chips",
            "{C:mult}+#2#{} Mult",
			'{C:dark_edition,s:0.7,E:2}Shader by : stupxd'
        }
    },
    discovered = true,
    unlocked = true,
    shader = 'dithered',
    config = {chips = -25, mult = 33},
	sound = {
		sound = 'jen_e_dithered',
		per = 1,
		vol = 0.6
	},
    in_shop = true,
    weight = 8,
    extra_cost = 2,
    apply_to_float = false,
    loc_vars = function(self)
        return {vars = {self.config.chips, self.config.mult}}
    end
})'''
position = "at"
payload = '''SMODS.Edition({
    key = "dithered",
    loc_txt = {
        name = "Dithered",
        label = "Dithered",
        text = {
            "{C:red}#1#{} Chips",
            "{C:mult}+#2#{} Mult",
			'{C:dark_edition,s:0.7,E:2}Shader by : stupxd'
        }
    },
    discovered = true,
    unlocked = true,
    shader = 'dithered',
    config = {chips = -25, mult = 33},
	sound = {
		sound = 'jen_e_dithered',
		per = 1,
		vol = 0.6
	},
    in_shop = true,
    weight = 8,
    extra_cost = 2,
    apply_to_float = false,
    loc_vars = function(self)
        return {vars = {self.config.chips, self.config.mult}}
    end,
	calculate = function(self, card, context)
		if context.edition and context.cardarea == G.jokers and context.joker_main then
			return {chips = self.config.chips, mult = self.config.mult}
		end
		if context.main_scoring and context.cardarea == G.play then
			return {chips = self.config.chips, mult = self.config.mult}
		end
	end
})'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''loc_vars = function(self)
        return {vars = {self.config.chips, self.config.mult}}
    end'''
position = "after"
payload = ''',
	calculate = function(self, card, context)
		if context.edition and context.cardarea == G.jokers and context.joker_main then
			return {chips = self.config.chips, mult = self.config.mult}
		end
		if context.main_scoring and context.cardarea == G.play then
			return {chips = self.config.chips, mult = self.config.mult}
		end
	end'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''SMODS.Edition({
    key = "prismatic",
    loc_txt = {
        name = "Prismatic",
        label = "Prismatic",
        text = {
            "{X:mult,C:white}x#1#{C:mult} Mult{}, {X:chips,C:white}x#2#{C:chips} Chips",
			'and {C:money}+$#3#{} when scored',
			'{C:dark_edition,s:0.7,E:2}Shader by : Oiiman'
        }
    },
    shader = "prismatic",
    discovered = true,
    unlocked = true,
    config = {x_mult = 15, x_chips = 5, p_dollars = 5},
	sound = {
		sound = 'jen_e_prismatic',
		per = 1.2,
		vol = 0.5
	},
    in_shop = true,
    weight = 0.2,
    extra_cost = 12,
    apply_to_float = false,
	get_weight = function(self)
        return G.GAME.edition_rate * self.weight
    end,
    loc_vars = function(self)
        return { vars = { self.config.x_mult, self.config.x_chips, self.config.p_dollars } }
    end
})'''
position = "at"
payload = '''SMODS.Edition({
    key = "prismatic",
    loc_txt = {
        name = "Prismatic",
        label = "Prismatic",
        text = {
            "{X:mult,C:white}x#1#{C:mult} Mult{}, {X:chips,C:white}x#2#{C:chips} Chips{}",
			'and {C:money}+$#3#{} when scored',
			'{C:dark_edition,s:0.7,E:2}Shader by : Oiiman'
        }
    },
    shader = "prismatic",
    discovered = true,
    unlocked = true,
    config = {x_mult = 15, x_chips = 5, p_dollars = 5},
	sound = {
		sound = 'jen_e_prismatic',
		per = 1.2,
		vol = 0.5
	},
    in_shop = true,
    weight = 0.2,
    extra_cost = 12,
    apply_to_float = false,
	get_weight = function(self)
        return G.GAME.edition_rate * self.weight
    end,
    loc_vars = function(self)
        return { vars = { self.config.x_mult, self.config.x_chips, self.config.p_dollars } }
    end,
	calculate = function(self, card, context)
		if context.edition and context.cararea == G.jokers and context.joker_main then
			return {x_mult = self.config.x_mult, x_chips = self.config.x_chips, dollars = self.config.p_dollars}
		end
		if context.main_scoring and context.cararea == G.play then
			return {x_mult = self.config.x_mult, x_chips = self.config.x_chips, dollars = self.config.p_dollars}
		end
	end
})'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''SMODS.Edition({
    key = "ionized",
    loc_txt = {
        name = "Ionised",
        label = "Ionised",
        text = {
            "{C:blue}+#1# Chips{}, {C:red,s:1.2}BUT",
			"{X:red,C:white}x#2#{C:red} Mult",
			'{C:dark_edition,s:0.7,E:2}Shader by : Oiiman'
        }
    },
    shader = "ionized",
    discovered = true,
    unlocked = true,
    config = {chips = 2000, x_mult = 0.5},
	sound = {
		sound = 'jen_e_ionized',
		per = 1,
		vol = 0.5
	},
    in_shop = true,
    weight = 3,
    extra_cost = 7,
    apply_to_float = false,
	get_weight = function(self)
        return G.GAME.edition_rate * self.weight
    end,
    loc_vars = function(self)
        return { vars = { self.config.chips, self.config.x_mult } }
    end
})'''
position = "at"
payload = '''SMODS.Edition({
	key = "ionized",
	loc_txt = {
		name = "Ionised",
		label = "Ionised",
		text = {
			"{C:blue}+#1# Chips{}, {C:red,s:1.2}BUT",
			"{X:red,C:white}x#2#{C:red} Mult",
			'{C:dark_edition,s:0.7,E:2}Shader by : Oiiman'
		}
	},
	shader = "ionized",
	discovered = true,
	unlocked = true,
	config = {chips = 2000, x_mult = 0.5},
	sound = {
		sound = 'jen_e_ionized',
		per = 1,
		vol = 0.5
	},
	in_shop = true,
	weight = 3,
	extra_cost = 7,
	apply_to_float = false,
	get_weight = function(self)
		return G.GAME.edition_rate * self.weight
	end,
	loc_vars = function(self)
		return { vars = { self.config.chips, self.config.x_mult } }
	end,
	calculate = function(self, card, context)
		if context.edition and context.cararea == G.jokers and context.joker_main then
			return {chips = self.config.chips, x_mult = self.config.x_mult}
		end
		if context.main_scoring and context.cararea == G.play then
			return {chips = self.config.chips, x_mult = self.config.x_mult}
		end
	end
})'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''SMODS.Edition({
    key = "blaze",
    loc_txt = {
        name = "Blaze",
        label = "Blaze",
        text = {
			'Retrigger this card {C:attention}#1#{} time(s), {C:red,s:1.2}BUT',
            "{C:red}#2#{C:chips} Chips{} and {C:red}#3#{C:mult} Mult",
			'{C:dark_edition,s:0.7,E:2}Shader by : stupxd'
        }
    },
    shader = "blaze",
    discovered = true,
    unlocked = true,
    config = {retriggers = 5, chips = -5, mult = -1},
	sound = {
		sound = 'jen_e_blaze',
		per = 1,
		vol = 0.5
	},
    in_shop = true,
    weight = 5,
    extra_cost = 7,
    apply_to_float = false,
	get_weight = function(self)
        return G.GAME.edition_rate * self.weight
    end,
    loc_vars = function(self)
        return { vars = { self.config.retriggers, self.config.chips, self.config.mult } }
    end
})'''
position = "at"
payload = '''SMODS.Edition({
    key = "blaze",
    loc_txt = {
        name = "Blaze",
        label = "Blaze",
        text = {
			'Retrigger this card {C:attention}#1#{} time(s), {C:red,s:1.2}BUT',
            "{C:red}#2#{C:chips} Chips{} and {C:red}#3#{C:mult} Mult",
			'{C:dark_edition,s:0.7,E:2}Shader by : stupxd'
        }
    },
    shader = "blaze",
    discovered = true,
    unlocked = true,
    config = {retriggers = 5, chips = -5, mult = -1},
	sound = {
		sound = 'jen_e_blaze',
		per = 1,
		vol = 0.5
	},
    in_shop = true,
    weight = 5,
    extra_cost = 7,
    apply_to_float = false,
	get_weight = function(self)
        return G.GAME.edition_rate * self.weight
    end,
    loc_vars = function(self)
        return { vars = { self.config.retriggers, self.config.chips, self.config.mult } }
    end,
	calculate = function(self, card, context)
		if context.edition and context.cardarea == G.jokers and context.joker_main then
			return {
				retriggers = self.config.retriggers,
				chips = self.config.chips,
				mult = self.config.mult
			}
		end
		if context.repetition and context.cardarea == G.play then
			return {
				repetitions = self.config.retriggers,
				chips = self.config.chips,
				mult = self.config.mult
			}
		end
	end
})'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''if identical > 0 then
				play_sound_q('button')
				jl.hm('x' .. identical)
				delay(3)
				for i = 1, identical do
					cumulative = cumulative + ((2 ^ (i-1))/4)
					play_sound_q('button', 1.1)
					jl.hcm('+' .. number_format(cumulative), i == identical and '' or ('x' .. (identical - i)))
					delay(0.25)
				end
				delay(2.75)
				update_operator_display()
			else
				if cumulative <= 0 then jl.hcm('Nope!', 'Nope!') else jl.hc('Nope!') end
				play_sound_q('timpani')
				delay(3)
				update_operator_display()
			end'''
position = "at"
payload = '''if to_big(identical) > to_big(0) then
				play_sound_q('button')
				jl.hm('x' .. identical)
				delay(3)
				for i = 1, identical do
					cumulative = cumulative + ((2 ^ (i-1))/4)
					play_sound_q('button', 1.1)
					jl.hcm('+' .. number_format(cumulative), i == identical and '' or ('x' .. (identical - i)))
					delay(0.25)
				end
				delay(2.75)
				update_operator_display()
			else
				if to_big(cumulative) <= to_big(0) then jl.hcm('Nope!', 'Nope!') else jl.hc('Nope!') end
				play_sound_q('timpani')
				delay(3)
				update_operator_display()
			end'''
match_indent = true
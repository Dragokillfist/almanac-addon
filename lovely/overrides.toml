[manifest]
version = "1.0.0"
dump_lua = true
priority = -1

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''local new_colour = G.C.WHITE'''
position = "after"
payload = '''level = type(level) == "number" and level or level:to_number()'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''if not no_astronomy and amount > 0 then
		if Jen.hv('astronomy', 9) then
			amount = amount * 5
		elseif Jen.hv('astronomy', 8) then
			amount = amount * 2
		end
	end'''
position = "at"
payload = '''if not no_astronomy and to_big(amount) > to_big(0) then
		if Jen.hv('astronomy', 9) then
			amount = amount * 5
		elseif Jen.hv('astronomy', 8) then
			amount = amount * 2
		end
	end'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''if amount > 0 then
		if #SMODS.find_card('j_jen_guilduryn') > 0 and hand ~= jl.favhand() then
			for k, v in ipairs(G.jokers.cards) do
				if v.gc and v:gc().key == 'j_jen_guilduryn' then
					card_eval_status_text(v, 'extra', nil, nil, nil, {message = 'Redirected!', colour = G.C.MONEY})
					break
				end
			end
			hand = jl.favhand()
			if not instant then
				jl.th(hand)
			end
		end
	end'''
position = "at"
payload = '''if to_big(amount) > to_big(0) then
		if #SMODS.find_card('j_jen_guilduryn') > 0 and hand ~= jl.favhand() then
			for k, v in ipairs(G.jokers.cards) do
				if v.gc and v:gc().key == 'j_jen_guilduryn' then
					card_eval_status_text(v, 'extra', nil, nil, nil, {message = 'Redirected!', colour = G.C.MONEY})
					break
				end
			end
			hand = jl.favhand()
			if not instant then
				jl.th(hand)
			end
		end
	end'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''if amount > 0 then
		add_malice(25 * amount)
	end
	if jl.invalid_number(number_format(G.GAME.hands[hand].level)) then
		G.GAME.hands[hand].level = 1e300
		if not instant then
			update_hand_text({sound = 'button', volume = 0.7, pitch = 0.8, delay = 0.3}, {level=maxfloat})
			delay(0.3)
		end
	end'''
position = "at"
payload = '''if to_big(amount) > to_big(0) then
        add_malice(25 * amount)
    end
    if jl.invalid_number(number_format(G.GAME.hands[hand].level)) then
        G.GAME.hands[hand].level = 1e300
        if not instant then
            update_hand_text({sound = 'button', volume = 0.7, pitch = 0.8, delay = 0.3}, {level=maxfloat})
            delay(0.3)
        end
    end'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''if amount < 0 and Jen.hv('astronomy', 11) and not no_astronomy then
		local refund = math.abs(amount) / 4
		local fav = jl.favhand()
		if Jen.config.verbose_astronomicon then jl.th(fav) end
		fastlv(card, fav, not Jen.config.verbose_astronomicon, refund, true)
	end
	if amount > 0 and Jen.hv('astronomy', 12) and not no_astronomy then
		local dividend = amount / 10
		local fav = jl.favhand()
		if Jen.config.verbose_astronomicon then jl.th(fav) end
		fastlv(card, fav, not Jen.config.verbose_astronomicon, dividend, true)
	end'''
position = "at"
payload = '''if to_big(amount) < to_big(0) and Jen.hv('astronomy', 11) and not no_astronomy then
        local refund = math.abs(amount) / 4
        local fav = jl.favhand()
        if Jen.config.verbose_astronomicon then jl.th(fav) end
        fastlv(card, fav, not Jen.config.verbose_astronomicon, refund, true)
    end
    if to_big(amount) > to_big(0) and Jen.hv('astronomy', 12) and not no_astronomy then
        local dividend = amount / 10
        local fav = jl.favhand()
        if Jen.config.verbose_astronomicon then jl.th(fav) end
        fastlv(card, fav, not Jen.config.verbose_astronomicon, dividend, true)
    end'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''if fusion then
			local can_afford = (Jen.fusions[fusion].cost or 0) <= G.GAME.dollars
			if can_afford and not card.already_notified then
				play_sound('jen_done')
				card:juice_up(0.5, 0.5)
				card.already_notified = true
			elseif not can_afford then
				card.already_notified = false
			end
			card.fusion_ready = can_afford
			card.target_fusion = fusion
			card.fusion_details = fusion .. ' : $' .. number_format(Jen.fusions[fusion].cost or 0)
		elseif #G.jokers.highlighted + math.max(0, #G.consumeables.highlighted - 1) > 0 then
			card.fusion_details = 'No recipe matches selected cards'
			card.already_notified = false
		end'''
position = "at"
payload = '''if fusion then
            local can_afford = to_big(Jen.fusions[fusion].cost or 0) <= to_big(G.GAME.dollars)
            if can_afford and not card.already_notified then
                play_sound('jen_done')
                card:juice_up(0.5, 0.5)
                card.already_notified = true
            elseif not can_afford then
                card.already_notified = false
            end
            card.fusion_ready = can_afford
            card.target_fusion = fusion
            card.fusion_details = fusion .. ' : $' .. number_format(Jen.fusions[fusion].cost or 0)
        elseif #G.jokers.highlighted + math.max(0, #G.consumeables.highlighted - 1) > 0 then
            card.fusion_details = 'No recipe matches selected cards'
            card.already_notified = false
        end'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''	if v.level > 1 then
				levels = levels + math.max(0, v.level - 1)
				level_up_hand(nil, k, true, -v.level + 1, true, true)
			end'''
position = "at"
payload = '''    if to_big(v.level) > to_big(1) then
                levels = levels + math.max(0, v.level - 1)
                level_up_hand(nil, k, true, -v.level + 1, true, true)
            end'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''if G.GAME.hands[fav].level > 0 then
			if hands.backhand then
				card:do_jen_astronomy(hands.backhand, mod)
				jl.th(hands.backhand)
				level_up_hand(card, hands.backhand, nil, mod)
			end
			if hands.forehand then
				card:do_jen_astronomy(hands.forehand, mod)
				jl.th(hands.forehand)
				level_up_hand(card, hands.forehand, nil, mod)
			end
		end'''
position = "at"
payload = '''if to_big(G.GAME.hands[fav].level) > to_big(0) then
            if hands.backhand then
                card:do_jen_astronomy(hands.backhand, mod)
                jl.th(hands.backhand)
                level_up_hand(card, hands.backhand, nil, mod)
            end
            if hands.forehand then
                card:do_jen_astronomy(hands.forehand, mod)
                jl.th(hands.forehand)
                level_up_hand(card, hands.forehand, nil, mod)
            end
        end'''
match_indent = true


[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''SMODS.Edition({
    key = "dithered",
    loc_txt = {
        name = "Dithered",
        label = "Dithered",
        text = {
            "{C:red}#1#{} Chips",
            "{C:mult}+#2#{} Mult",
			'{C:dark_edition,s:0.7,E:2}Shader by : stupxd'
        }
    },
    discovered = true,
    unlocked = true,
    shader = 'dithered',
    config = {chips = -25, mult = 33},
	sound = {
		sound = 'jen_e_dithered',
		per = 1,
		vol = 0.6
	},
    in_shop = true,
    weight = 8,
    extra_cost = 2,
    apply_to_float = false,
    loc_vars = function(self)
        return {vars = {self.config.chips, self.config.mult}}
    end
})'''
position = "at"
payload = '''SMODS.Edition({
    key = "dithered",
    loc_txt = {
        name = "Dithered",
        label = "Dithered",
        text = {
            "{C:red}#1#{} Chips",
            "{C:mult}+#2#{} Mult",
			'{C:dark_edition,s:0.7,E:2}Shader by : stupxd'
        }
    },
    discovered = true,
    unlocked = true,
    shader = 'dithered',
    config = {chips = -25, mult = 33},
	sound = {
		sound = 'jen_e_dithered',
		per = 1,
		vol = 0.6
	},
    in_shop = true,
    weight = 8,
    extra_cost = 2,
    apply_to_float = false,
    loc_vars = function(self)
        return {vars = {self.config.chips, self.config.mult}}
    end,
	calculate = function(self, card, context)
		if context.edition and context.cardarea == G.jokers and context.joker_main then
			return {chips = self.config.chips, mult = self.config.mult}
		end
		if context.main_scoring and context.cardarea == G.play then
			return {chips = self.config.chips, mult = self.config.mult}
		end
	end
})'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''loc_vars = function(self)
        return {vars = {self.config.chips, self.config.mult}}
    end'''
position = "after"
payload = ''',
	calculate = function(self, card, context)
		if context.edition and context.cardarea == G.jokers and context.joker_main then
			return {chips = self.config.chips, mult = self.config.mult}
		end
		if context.main_scoring and context.cardarea == G.play then
			return {chips = self.config.chips, mult = self.config.mult}
		end
	end'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''SMODS.Edition({
    key = "prismatic",
    loc_txt = {
        name = "Prismatic",
        label = "Prismatic",
        text = {
            "{X:mult,C:white}x#1#{C:mult} Mult{}, {X:chips,C:white}x#2#{C:chips} Chips",
			'and {C:money}+$#3#{} when scored',
			'{C:dark_edition,s:0.7,E:2}Shader by : Oiiman'
        }
    },
    shader = "prismatic",
    discovered = true,
    unlocked = true,
    config = {x_mult = 15, x_chips = 5, p_dollars = 5},
	sound = {
		sound = 'jen_e_prismatic',
		per = 1.2,
		vol = 0.5
	},
    in_shop = true,
    weight = 0.2,
    extra_cost = 12,
    apply_to_float = false,
	get_weight = function(self)
        return G.GAME.edition_rate * self.weight
    end,
    loc_vars = function(self)
        return { vars = { self.config.x_mult, self.config.x_chips, self.config.p_dollars } }
    end
})'''
position = "at"
payload = '''SMODS.Edition({
    key = "prismatic",
    loc_txt = {
        name = "Prismatic",
        label = "Prismatic",
        text = {
            "{X:mult,C:white}x#1#{C:mult} Mult{}, {X:chips,C:white}x#2#{C:chips} Chips{}",
			'and {C:money}+$#3#{} when scored',
			'{C:dark_edition,s:0.7,E:2}Shader by : Oiiman'
        }
    },
    shader = "prismatic",
    discovered = true,
    unlocked = true,
    config = {x_mult = 15, x_chips = 5, p_dollars = 5},
	sound = {
		sound = 'jen_e_prismatic',
		per = 1.2,
		vol = 0.5
	},
    in_shop = true,
    weight = 0.2,
    extra_cost = 12,
    apply_to_float = false,
	get_weight = function(self)
        return G.GAME.edition_rate * self.weight
    end,
    loc_vars = function(self)
        return { vars = { self.config.x_mult, self.config.x_chips, self.config.p_dollars } }
    end,
	calculate = function(self, card, context)
		if context.edition and context.cararea == G.jokers and context.joker_main then
			return {x_mult = self.config.x_mult, x_chips = self.config.x_chips, dollars = self.config.p_dollars}
		end
		if context.main_scoring and context.cararea == G.play then
			return {x_mult = self.config.x_mult, x_chips = self.config.x_chips, dollars = self.config.p_dollars}
		end
	end
})'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''SMODS.Edition({
    key = "ionized",
    loc_txt = {
        name = "Ionised",
        label = "Ionised",
        text = {
            "{C:blue}+#1# Chips{}, {C:red,s:1.2}BUT",
			"{X:red,C:white}x#2#{C:red} Mult",
			'{C:dark_edition,s:0.7,E:2}Shader by : Oiiman'
        }
    },
    shader = "ionized",
    discovered = true,
    unlocked = true,
    config = {chips = 2000, x_mult = 0.5},
	sound = {
		sound = 'jen_e_ionized',
		per = 1,
		vol = 0.5
	},
    in_shop = true,
    weight = 3,
    extra_cost = 7,
    apply_to_float = false,
	get_weight = function(self)
        return G.GAME.edition_rate * self.weight
    end,
    loc_vars = function(self)
        return { vars = { self.config.chips, self.config.x_mult } }
    end
})'''
position = "at"
payload = '''SMODS.Edition({
	key = "ionized",
	loc_txt = {
		name = "Ionised",
		label = "Ionised",
		text = {
			"{C:blue}+#1# Chips{}, {C:red,s:1.2}BUT",
			"{X:red,C:white}x#2#{C:red} Mult",
			'{C:dark_edition,s:0.7,E:2}Shader by : Oiiman'
		}
	},
	shader = "ionized",
	discovered = true,
	unlocked = true,
	config = {chips = 2000, x_mult = 0.5},
	sound = {
		sound = 'jen_e_ionized',
		per = 1,
		vol = 0.5
	},
	in_shop = true,
	weight = 3,
	extra_cost = 7,
	apply_to_float = false,
	get_weight = function(self)
		return G.GAME.edition_rate * self.weight
	end,
	loc_vars = function(self)
		return { vars = { self.config.chips, self.config.x_mult } }
	end,
	calculate = function(self, card, context)
		if context.edition and context.cararea == G.jokers and context.joker_main then
			return {chips = self.config.chips, x_mult = self.config.x_mult}
		end
		if context.main_scoring and context.cararea == G.play then
			return {chips = self.config.chips, x_mult = self.config.x_mult}
		end
	end
})'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''SMODS.Edition({
    key = "blaze",
    loc_txt = {
        name = "Blaze",
        label = "Blaze",
        text = {
			'Retrigger this card {C:attention}#1#{} time(s), {C:red,s:1.2}BUT',
            "{C:red}#2#{C:chips} Chips{} and {C:red}#3#{C:mult} Mult",
			'{C:dark_edition,s:0.7,E:2}Shader by : stupxd'
        }
    },
    shader = "blaze",
    discovered = true,
    unlocked = true,
    config = {retriggers = 5, chips = -5, mult = -1},
	sound = {
		sound = 'jen_e_blaze',
		per = 1,
		vol = 0.5
	},
    in_shop = true,
    weight = 5,
    extra_cost = 7,
    apply_to_float = false,
	get_weight = function(self)
        return G.GAME.edition_rate * self.weight
    end,
    loc_vars = function(self)
        return { vars = { self.config.retriggers, self.config.chips, self.config.mult } }
    end
})'''
position = "at"
payload = '''SMODS.Edition({
    key = "blaze",
    loc_txt = {
        name = "Blaze",
        label = "Blaze",
        text = {
			'Retrigger this card {C:attention}#1#{} time(s), {C:red,s:1.2}BUT',
            "{C:red}#2#{C:chips} Chips{} and {C:red}#3#{C:mult} Mult",
			'{C:dark_edition,s:0.7,E:2}Shader by : stupxd'
        }
    },
    shader = "blaze",
    discovered = true,
    unlocked = true,
    config = {retriggers = 5, chips = -5, mult = -1},
	sound = {
		sound = 'jen_e_blaze',
		per = 1,
		vol = 0.5
	},
    in_shop = true,
    weight = 5,
    extra_cost = 7,
    apply_to_float = false,
	get_weight = function(self)
        return G.GAME.edition_rate * self.weight
    end,
    loc_vars = function(self)
        return { vars = { self.config.retriggers, self.config.chips, self.config.mult } }
    end,
	calculate = function(self, card, context)
		if context.edition and context.cardarea == G.jokers and context.joker_main then
			return {
				retriggers = self.config.retriggers,
				chips = self.config.chips,
				mult = self.config.mult
			}
		end
		if context.repetition and context.cardarea == G.play then
			return {
				repetitions = self.config.retriggers,
				chips = self.config.chips,
				mult = self.config.mult
			}
		end
	end
})'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''if identical > 0 then
				play_sound_q('button')
				jl.hm('x' .. identical)
				delay(3)
				for i = 1, identical do
					cumulative = cumulative + ((2 ^ (i-1))/4)
					play_sound_q('button', 1.1)
					jl.hcm('+' .. number_format(cumulative), i == identical and '' or ('x' .. (identical - i)))
					delay(0.25)
				end
				delay(2.75)
				update_operator_display()
			else
				if cumulative <= 0 then jl.hcm('Nope!', 'Nope!') else jl.hc('Nope!') end
				play_sound_q('timpani')
				delay(3)
				update_operator_display()
			end'''
position = "at"
payload = '''if to_big(identical) > to_big(0) then
				play_sound_q('button')
				jl.hm('x' .. identical)
				delay(3)
				for i = 1, identical do
					cumulative = cumulative + ((2 ^ (i-1))/4)
					play_sound_q('button', 1.1)
					jl.hcm('+' .. number_format(cumulative), i == identical and '' or ('x' .. (identical - i)))
					delay(0.25)
				end
				delay(2.75)
				update_operator_display()
			else
				if to_big(cumulative) <= to_big(0) then jl.hcm('Nope!', 'Nope!') else jl.hc('Nope!') end
				play_sound_q('timpani')
				delay(3)
				update_operator_display()
			end'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''for k, v in pairs(G.GAME.hands) do
			if v.level > max_level then
				hands = {[k] = true}
				max_level = v.level
			elseif v.level == max_level then
				hands[k] = true
			end
		end'''
position = "at"
payload = '''for k, v in pairs(G.GAME.hands) do
			if to_big(v.level) > to_big(max_level) then
				hands = {[k] = true}
				max_level = v.level
			elseif to_big(v.level) == to_big(max_level) then
				hands[k] = true
			end
		end'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''SMODS.Edition({
    key = "wavy",
    loc_txt = {
        name = "Wavy",
        label = "Wavy",
        text = {
			'Retrigger this card {C:attention}#1#{} time(s)',
			'{C:dark_edition,s:0.7,E:2}Shader by : stupxd'
        }
    },
	misc_badge = {
		colour = G.C.RARITY[3],
		text = {
			"Rare"
		}
	},
    shader = "wavy",
	disable_base_shader = true,
	no_shadow = true,
    discovered = true,
    unlocked = true,
    config = {retriggers = 30},
	sound = {
		sound = 'jen_e_wavy',
		per = 1,
		vol = 0.5
	},
    in_shop = true,
    weight = 1,
    extra_cost = 13,
    apply_to_float = false,
	get_weight = function(self)
        return G.GAME.edition_rate * self.weight
    end,
    loc_vars = function(self)
        return { vars = { self.config.retriggers } }
    end
})'''
position = "at"
payload = '''SMODS.Edition({
    key = "wavy",
    loc_txt = {
        name = "Wavy",
        label = "Wavy",
        text = {
			'Retrigger this card {C:attention}#1#{} time(s)',
			'{C:dark_edition,s:0.7,E:2}Shader by : stupxd'
        }
    },
	misc_badge = {
		colour = G.C.RARITY[3],
		text = {
			"Rare"
		}
	},
    shader = "wavy",
	disable_base_shader = true,
	no_shadow = true,
    discovered = true,
    unlocked = true,
    config = {retriggers = 30},
	sound = {
		sound = 'jen_e_wavy',
		per = 1,
		vol = 0.5
	},
    in_shop = true,
    weight = 1,
    extra_cost = 13,
    apply_to_float = false,
	get_weight = function(self)
        return G.GAME.edition_rate * self.weight
    end,
    loc_vars = function(self)
        return { vars = { self.config.retriggers } }
    end,
	calculate = function(self, card, context)
		if context.edition and context.cardarea == G.jokers and context.joker_main then
			return {
				retriggers = self.config.retriggers
			}
		end
		if context.repetition and context.cardarea == G.play then
			return {
				repetitions = self.config.retriggers
			}
		end
	end
})'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''SMODS.Edition({
    key = "bismuth",
    loc_txt = {
        name = "Bismuth",
        label = "Bismuth",
        text = {
			'{C:attention}Retrigger{} this card {C:attention}#1#{} time(s)',
			'Number of retriggers {C:attention}doubles{} for every {C:dark_edition}Bismuth{} card owned',
			'{C:dark_edition,s:0.7,E:2}Shader by : Oiiman'
        }
    },
	misc_badge = {
		colour = G.C.RARITY[3],
		text = {
			"Rare"
		}
	},
    shader = 'bismuth',
    discovered = true,
    unlocked = true,
    config = {retriggers = 1},
	sound = {
		sound = 'jen_e_bismuth',
		per = 1,
		vol = 0.5
	},
    in_shop = true,
    weight = 2,
    extra_cost = 8,
    apply_to_float = false,
	get_weight = function(self)
        return G.GAME.edition_rate * self.weight
    end,
    loc_vars = function(self)
        return { vars = { bismuth_retriggers() } }
    end
})'''
position = "at"
payload = '''SMODS.Edition({
    key = "bismuth",
    loc_txt = {
        name = "Bismuth",
        label = "Bismuth",
        text = {
			'{C:attention}Retrigger{} this card {C:attention}#1#{} time(s)',
			'Number of retriggers {C:attention}doubles{} for every {C:dark_edition}Bismuth{} card owned',
			'{C:dark_edition,s:0.7,E:2}Shader by : Oiiman'
        }
    },
	misc_badge = {
		colour = G.C.RARITY[3],
		text = {
			"Rare"
		}
	},
    shader = 'bismuth',
    discovered = true,
    unlocked = true,
    config = {retriggers = 1},
	sound = {
		sound = 'jen_e_bismuth',
		per = 1,
		vol = 0.5
	},
    in_shop = true,
    weight = 2,
    extra_cost = 8,
    apply_to_float = false,
	get_weight = function(self)
        return G.GAME.edition_rate * self.weight
    end,
    loc_vars = function(self)
        return { vars = { bismuth_retriggers() } }
    end,
	calculate = function(self, card, context)
		if context.edition and context.cardarea == G.jokers and context.joker_main then
			return {
				retriggers = self.config.retriggers
			}
		end
		if context.main_scoring and context.cardarea == G.play then
			return {
				retriggers = self.config.retriggers
			}
		end
	end
})'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''SMODS.Edition({
    key = "diplopia",
    loc_txt = {
        name = "Diplopia",
        label = "Diplopia",
        text = {
			'Retrigger this card {C:attention}#1#{} time(s)',
			'{C:attention}Resists{} being destroyed/sold {C:attention}once{}, after which',
			'this edition is then removed from the card',
			'{C:inactive}(Selling will still give money)',
			"{C:inactive}I'm... seeing... double...!",
			'{C:dark_edition,s:0.7,E:2}Shader by : Oiiman'
        }
    },
    shader = "diplopia",
    discovered = true,
    unlocked = true,
    config = {retriggers = 1},
	sound = {
		sound = 'jen_e_diplopia',
		per = 1,
		vol = 0.8
	},
    in_shop = true,
    weight = 3,
    extra_cost = 7,
    apply_to_float = true,
	get_weight = function(self)
        return G.GAME.edition_rate * self.weight
    end,
    loc_vars = function(self)
        return { vars = { self.config.retriggers } }
    end
})'''
position = "at"
payload = '''SMODS.Edition({
    key = "diplopia",
    loc_txt = {
        name = "Diplopia",
        label = "Diplopia",
        text = {
			'Retrigger this card {C:attention}#1#{} time(s)',
			'{C:attention}Resists{} being destroyed/sold {C:attention}once{}, after which',
			'this edition is then removed from the card',
			'{C:inactive}(Selling will still give money)',
			"{C:inactive}I'm... seeing... double...!{}",
			'{C:dark_edition,s:0.7,E:2}Shader by : Oiiman'
        }
    },
    shader = "diplopia",
    discovered = true,
    unlocked = true,
    config = {retriggers = 1},
	sound = {
		sound = 'jen_e_diplopia',
		per = 1,
		vol = 0.8
	},
    in_shop = true,
    weight = 3,
    extra_cost = 7,
    apply_to_float = true,
	get_weight = function(self)
        return G.GAME.edition_rate * self.weight
    end,
    loc_vars = function(self)
        return { vars = { self.config.retriggers } }
    end,
	calculate = function(self, card, context)
		if context.edition and context.cardarea == G.jokers and context.joker_main then
			return {
				retriggers = self.config.retriggers
			}
		end
		if context.repetition and context.cardarea == G.play then
			return {
				repetitions = self.config.retriggers
			}
		end
	end
})'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''SMODS.Edition({
    key = "sequin",
    loc_txt = {
        name = "Sequin",
        label = "Sequin",
        text = {
            "{C:chips}+#1#{} Chips",
            "{C:red}+#2#{} Mult",
			'Can be {C:money}sold{} for {C:attention}three times{} its cost {C:inactive}(+200% profit)',
			'Minimum sell price is always at least {C:money}$6 {C:inactive}(+500% minimum profit)',
			'{C:dark_edition,s:0.7,E:2}Shader by : Oiiman'
        }
    },
    discovered = true,
    unlocked = true,
    shader = 'sequin',
    config = { chips = 25, mult = 2 },
	sound = {
		sound = 'jen_e_sequin',
		per = 1,
		vol = 0.4
	},
    in_shop = true,
    weight = 3,
    extra_cost = 0,
    apply_to_float = false,
	get_weight = function(self)
        return G.GAME.edition_rate * self.weight
    end,
    loc_vars = function(self)
        return { vars = {self.config.chips, self.config.mult}}
    end
})'''
position = "at"
payload = '''SMODS.Edition({
    key = "sequin",
    loc_txt = {
        name = "Sequin",
        label = "Sequin",
        text = {
            "{C:chips}+#1#{} Chips",
            "{C:red}+#2#{} Mult",
			'Can be {C:money}sold{} for {C:attention}three times{} its cost {C:inactive}(+200% profit)',
			'Minimum sell price is always at least {C:money}$6 {C:inactive}(+500% minimum profit)',
			'{C:dark_edition,s:0.7,E:2}Shader by : Oiiman'
        }
    },
    discovered = true,
    unlocked = true,
    shader = 'sequin',
    config = { chips = 25, mult = 2 },
	sound = {
		sound = 'jen_e_sequin',
		per = 1,
		vol = 0.4
	},
    in_shop = true,
    weight = 3,
    extra_cost = 0,
    apply_to_float = false,
	get_weight = function(self)
        return G.GAME.edition_rate * self.weight
    end,
    loc_vars = function(self)
        return { vars = {self.config.chips, self.config.mult}}
    end,
	calculate = function(self, card, context)
		if context.edition and context.cardarea == G.jokers and context.joker_main then
			return {
				chips = self.config.chips,
				mult = self.config.mult
			}
		end
		if context.main_scoring and context.cardarea == G.play then
			return {
				chips = self.config.chips,
				mult = self.config.mult
			}
		end
	end
})'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''SMODS.Edition({
    key = "laminated",
    loc_txt = {
        name = "Laminated",
        label = "Laminated",
        text = {
            "{C:blue}+#1# Chips{}, {C:red}+#2# Mult",
			"Card costs and sells for",
			"{C:purple}significantly less value{}"
        }
    },
    shader = "laminated",
    discovered = true,
    unlocked = true,
    config = {chips = 3, mult = 1},
	sound = {
		sound = 'jen_e_laminated',
		per = 1,
		vol = 0.4
	},
    in_shop = true,
    weight = 8,
    extra_cost = -5,
    apply_to_float = false,
	get_weight = function(self)
        return G.GAME.edition_rate * self.weight
    end,
    loc_vars = function(self)
        return { vars = { self.config.chips, self.config.mult } }
    end
})'''
position = "at"
payload = '''SMODS.Edition{
    key = "laminated",
    loc_txt = {
        name = "Laminated",
        label = "Laminated",
        text = {
            "{C:blue}+#1# Chips{}, {C:red}+#2# Mult{}",
			"Card costs and sells for",
			"{C:purple}significantly less value{}"
        }
    },
    shader = "laminated",
    discovered = true,
    unlocked = true,
    config = {chips = 3, mult = 1},
	sound = {
		sound = 'jen_e_laminated',
		per = 1,
		vol = 0.4
	},
    in_shop = true,
    weight = 8,
    extra_cost = -5,
    apply_to_float = false,
	get_weight = function(self)
        return G.GAME.edition_rate * self.weight
    end,
    loc_vars = function(self)
        return { vars = { self.config.chips, self.config.mult } }
    end,
	calculate = function(self, card, context)
		if context.edition and context.cardarea == G.jokers and context.joker_main then
			return {
				chips = self.config.chips,
				mult = self.config.mult
			}
		end
		if context.main_scoring and context.cardarea == G.play then
			return {
				chips = self.config.chips,
				mult = self.config.mult
			}
		end
	end
}'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''SMODS.Edition({
    key = "crystal",
    loc_txt = {
        name = "Crystal",
        label = "Crystal",
        text = {
            "{C:chips}+#1# Chips",
			"Card costs and sells for {C:money}$1{}"
        }
    },
    shader = "laminated",
    discovered = true,
    unlocked = true,
	disable_base_shader = true,
	no_shadow = true,
    config = {chips = 111},
	sound = {
		sound = 'jen_e_crystal',
		per = 1,
		vol = 0.4
	},
    in_shop = true,
    weight = 4,
    extra_cost = 0,
    apply_to_float = false,
	get_weight = function(self)
        return G.GAME.edition_rate * self.weight
    end,
    loc_vars = function(self)
        return { vars = { self.config.chips } }
    end
})'''
position = "at"
payload = '''SMODS.Edition{
    key = "crystal",
    loc_txt = {
        name = "Crystal",
        label = "Crystal",
        text = {
            "{C:chips}+#1# Chips{}",
			"Card costs and sells for {C:money}$1{}"
        }
    },
    shader = "laminated",
    discovered = true,
    unlocked = true,
	disable_base_shader = true,
	no_shadow = true,
    config = {chips = 111},
	sound = {
		sound = 'jen_e_crystal',
		per = 1,
		vol = 0.4
	},
    in_shop = true,
    weight = 4,
    extra_cost = 0,
    apply_to_float = false,
	get_weight = function(self)
        return G.GAME.edition_rate * self.weight
    end,
    loc_vars = function(self)
        return { vars = { self.config.chips } }
    end,
	calculate = function(self, card, context)
		if context.edition and context.cardarea == G.jokers and context.joker_main then
			return {
				chips = self.config.chips
			}
		end
		if context.main_scoring and context.cardarea == G.play then
			return {
				chips = self.config.chips
			}
		end
	end
}'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''SMODS.Edition({
    key = "sepia",
    loc_txt = {
        name = "Sepia",
        label = "Sepia",
        text = {
            "{C:blue}+#1# Chips{}, {C:red}+#2# Mult",
            "Card costs and sells for",
			"{C:money}significantly more value",
			'{C:dark_edition,s:0.7,E:2}Shader by : stupxd'
        }
    },
    shader = "sepia",
    discovered = true,
    unlocked = true,
    config = {chips = 150, mult = 9},
	sound = {
		sound = 'jen_e_sepia',
		per = 1,
		vol = 0.5
	},
    in_shop = true,
    weight = 6,
    extra_cost = 20,
	get_weight = function(self)
        return G.GAME.edition_rate * self.weight
    end,
    apply_to_float = false,
    loc_vars = function(self)
        return { vars = { self.config.chips, self.config.mult } }
    end
})'''
position = "at"
payload = '''SMODS.Edition{
    key = "sepia",
    loc_txt = {
        name = "Sepia",
        label = "Sepia",
        text = {
            "{C:blue}+#1# Chips{}, {C:red}+#2# Mult{}",
            "Card costs and sells for",
			"{C:money}significantly more value{}",
			'{C:dark_edition,s:0.7,E:2}Shader by : stupxd'
        }
    },
    shader = "sepia",
    discovered = true,
    unlocked = true,
    config = {chips = 150, mult = 9},
	sound = {
		sound = 'jen_e_sepia',
		per = 1,
		vol = 0.5
	},
    in_shop = true,
    weight = 6,
    extra_cost = 20,
	get_weight = function(self)
        return G.GAME.edition_rate * self.weight
    end,
    apply_to_float = false,
    loc_vars = function(self)
        return { vars = { self.config.chips, self.config.mult } }
    end,
	calculate = function(self, card, context)
		local chips = self.config.chips
		local mult = self.config.mult
		if context.edition and context.cardarea == G.jokers and context.joker_main then
			return {
				chips = self.config.chips,
				mult = self.config.mult
			}
		end
		if context.main_scoring and context.cardarea == G.play then
			return {
				chips = self.config.chips,
				mult = self.config.mult
			}
		end
	end
}'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''SMODS.Edition({
    key = "ink",
    loc_txt = {
        name = "Ink",
        label = "Ink",
        text = {
            "{C:chips}+#1# Chips{}, {C:mult}+#2# Mult",
            "and {X:mult,C:white}X#3#{C:red} Mult",
			'{C:dark_edition,s:0.7,E:2}Shader by : Oiiman'
        }
    },
    shader = "ink",
    discovered = true,
    unlocked = true,
    config = { chips = 200, mult = 10, x_mult = 2 },
	sound = {
		sound = 'jen_e_ink',
		per = 1.2,
		vol = 0.4
	},
    in_shop = true,
    weight = 4,
    extra_cost = 7,
    apply_to_float = false,
	get_weight = function(self)
        return G.GAME.edition_rate * self.weight
    end,
    loc_vars = function(self)
        return { vars = { self.config.chips, self.config.mult, self.config.x_mult } }
    end
})'''
position = "at"
payload = '''SMODS.Edition{
    key = "ink",
    loc_txt = {
        name = "Ink",
        label = "Ink",
        text = {
            "{C:chips}+#1# Chips{}, {C:mult}+#2# Mult{}",
            "and {X:mult,C:white}X#3#{C:red} Mult{}",
			'{C:dark_edition,s:0.7,E:2}Shader by : Oiiman'
        }
    },
    shader = "ink",
    discovered = true,
    unlocked = true,
    config = { chips = 200, mult = 10, x_mult = 2 },
	sound = {
		sound = 'jen_e_ink',
		per = 1.2,
		vol = 0.4
	},
    in_shop = true,
    weight = 4,
    extra_cost = 7,
    apply_to_float = false,
	get_weight = function(self)
        return G.GAME.edition_rate * self.weight
    end,
    loc_vars = function(self)
        return { vars = { self.config.chips, self.config.mult, self.config.x_mult } }
    end,
	calculate = function(self, card, context)
		local chips = self.config.chips
		local mult = self.config.mult
		local x_mult = self.config.x_mult
		if context.edition and context.cardarea == G.jokers and context.joker_main then
			return {
				chips = self.config.chips,
				mult = self.config.mult,
				x_mult = self.config.x_mult
			}
		end
		if context.main_scoring and context.cardarea == G.play then
			return {
				chips = self.config.chips,
				mult = self.config.mult,
				x_mult = self.config.x_mult
			}
		end
	end
}'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''SMODS.Edition({
    key = "polygloss",
    loc_txt = {
        name = "Polygloss",
        label = "Polygloss",
        text = {
            "{C:chips}+#1#{}, {X:chips,C:white}x#2#{} & {X:chips,C:dark_edition}^#3#{} Chips",
            "{C:mult}+#4#{}, {X:mult,C:white}x#5#{} & {X:mult,C:dark_edition}^#6#{} Mult",
			"Generates {C:money}+$#7#",
			'{C:dark_edition,s:0.7,E:2}Shader by : Oiiman'
        }
    },
    discovered = true,
    unlocked = true,
    shader = 'polygloss',
    config = { chips = 1, mult = 1, x_chips = 1.1, x_mult = 1.1, e_chips = 1.01, e_mult = 1.01, p_dollars = 1 },
    in_shop = true,
    weight = 8,
	sound = {
		sound = 'jen_e_polygloss',
		per = 1.2,
		vol = 0.4
	},
    extra_cost = 2,
    apply_to_float = false,
    loc_vars = function(self)
        return { vars = {self.config.chips, self.config.x_chips, self.config.e_chips, self.config.mult, self.config.x_mult, self.config.e_mult, self.config.p_dollars}}
    end
})'''
position = "at"
payload = '''SMODS.Edition{
    key = "polygloss",
    loc_txt = {
        name = "Polygloss",
        label = "Polygloss",
        text = {
            "{C:chips}+#1#{}, {X:chips,C:white}x#2#{} & {X:chips,C:dark_edition}^#3#{} Chips",
            "{C:mult}+#4#{}, {X:mult,C:white}x#5#{} & {X:mult,C:dark_edition}^#6#{} Mult",
			"Generates {C:money}+$#7#{}",
			'{C:dark_edition,s:0.7,E:2}Shader by : Oiiman'
        }
    },
    discovered = true,
    unlocked = true,
    shader = 'polygloss',
    config = { chips = 1, mult = 1, x_chips = 1.1, x_mult = 1.1, e_chips = 1.01, e_mult = 1.01, p_dollars = 1 },
    in_shop = true,
    weight = 8,
	sound = {
		sound = 'jen_e_polygloss',
		per = 1.2,
		vol = 0.4
	},
    extra_cost = 2,
    apply_to_float = false,
    loc_vars = function(self)
        return { vars = {self.config.chips, self.config.x_chips, self.config.e_chips, self.config.mult, self.config.x_mult, self.config.e_mult, self.config.p_dollars}}
    end,
	calculate = function(self, card, context)
		local chips = self.config.chips
		local mult = self.config.mult
		local x_chips = self.config.x_chips
		local x_mult = self.config.x_mult
		local e_chips = self.config.e_chips
		local e_mult = self.config.e_mult
		local p_dollars = self.config.p_dollars
		if context.edition and context.cardarea == G.jokers and context.joker_main then
			return {
				chips = self.config.chips,
				mult = self.config.mult,
				x_chips = self.config.x_chips,
				x_mult = self.config.x_mult,
				e_chips = self.config.e_chips,
				e_mult = self.config.e_mult,
				p_dollars = self.config.p_dollars
			}
		end
		if context.main_scoring and context.cardarea == G.play then
			return {
				chips = self.config.chips,
				mult = self.config.mult,
				x_chips = self.config.x_chips,
				x_mult = self.config.x_mult,
				e_chips = self.config.e_chips,
				e_mult = self.config.e_mult,
				p_dollars = self.config.p_dollars
			}
		end
	end
}'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''SMODS.Edition({
    key = "gilded",
    loc_txt = {
        name = "Gilded",
        label = "Gilded",
        text = {
            "Generates {C:money}$#1#",
			"Card has an {C:red}extreme{C:money} buy & sell value",
			'{C:dark_edition,s:0.7,E:2}Shader by : Oiiman'
        }
    },
    discovered = true,
    unlocked = true,
    shader = 'gilded',
    config = { p_dollars = 20 },
    in_shop = true,
    weight = 2,
	sound = {
		sound = 'jen_e_gilded',
		per = 1,
		vol = 0.4
	},
	misc_badge = {
		colour = G.C.RARITY[3],
		text = {
			"Rare"
		}
	},
    extra_cost = 200,
    apply_to_float = false,
    loc_vars = function(self)
        return { vars = {self.config.p_dollars}}
    end
})'''
position = "at"
payload = '''SMODS.Edition{
    key = "gilded",
    loc_txt = {
        name = "Gilded",
        label = "Gilded",
        text = {
            "Generates {C:money}$#1#{}",
			"Card has an {C:red}extreme{C:money} buy & sell value{}",
			'{C:dark_edition,s:0.7,E:2}Shader by : Oiiman'
        }
    },
    discovered = true,
    unlocked = true,
    shader = 'gilded',
    config = { p_dollars = 20 },
    in_shop = true,
    weight = 2,
	sound = {
		sound = 'jen_e_gilded',
		per = 1,
		vol = 0.4
	},
	misc_badge = {
		colour = G.C.RARITY[3],
		text = {
			"Rare"
		}
	},
    extra_cost = 200,
    apply_to_float = false,
    loc_vars = function(self)
        return { vars = {self.config.p_dollars}}
    end,
	calculate = function(self, card, context)
		local p_dollars = self.config.p_dollars
		if context.edition and context.cardarea == G.jokers and context.joker_main then
			return {
				p_dollars = self.config.p_dollars
			}
		end
		if context.main_scoring and context.cardarea == G.play then
			return {
				p_dollars = self.config.p_dollars
			}
		end
	end
}'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''SMODS.Edition({
    key = "chromatic",
    loc_txt = {
        name = "Chromatic",
        label = "Chromatic",
        text = {
            "{C:chips}+#1#{} Chips",
            "{C:mult}+#2#{} Mult",
			'{C:dark_edition,s:0.7,E:2}Shader by : stupxd'
        }
    },
    discovered = true,
    unlocked = true,
    shader = 'chromatic',
    config = { chips = 10, mult = 4 },
	sound = {
		sound = 'jen_e_chromatic',
		per = 1,
		vol = 0.5
	},
    in_shop = true,
    weight = 8,
    extra_cost = 4,
    apply_to_float = false,
    loc_vars = function(self)
        return { vars = {self.config.chips, self.config.mult}}
    end
})'''
position = "at"
payload = '''SMODS.Edition{
    key = "chromatic",
    loc_txt = {
        name = "Chromatic",
        label = "Chromatic",
        text = {
            "{C:chips}+#1#{} Chips",
            "{C:mult}+#2#{} Mult",
			'{C:dark_edition,s:0.7,E:2}Shader by : stupxd'
        }
    },
    discovered = true,
    unlocked = true,
    shader = 'chromatic',
    config = { chips = 10, mult = 4 },
	sound = {
		sound = 'jen_e_chromatic',
		per = 1,
		vol = 0.5
	},
    in_shop = true,
    weight = 8,
    extra_cost = 4,
    apply_to_float = false,
    loc_vars = function(self)
        return { vars = {self.config.chips, self.config.mult}}
    end,
	calculate = function(self, card, context)
		local chips = self.config.chips
		local mult = self.config.mult
		if context.edition and context.cardarea == G.jokers and context.joker_main then
		return {
			chips = self.config.chips,
			mult = self.config.mult
		}
		end
		if context.main_scoring and context.cardarea == G.play then
			return {
				chips = self.config.chips,
				mult = self.config.mult
			}
		end
	end
}'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''SMODS.Edition({
    key = "watered",
    loc_txt = {
        name = "Watercoloured",
        label = "Watercoloured",
        text = {
            "Retrigger this card {C:attention}#1#{} times",
			'{C:dark_edition,s:0.7,E:2}Shader by : stupxd'
        }
    },
    discovered = true,
    unlocked = true,
    shader = 'watered',
    config = { retriggers = 2 },
	sound = {
		sound = 'jen_e_watered',
		per = 1,
		vol = 0.4
	},
    in_shop = true,
    weight = 8,
    extra_cost = 4,
    apply_to_float = false,
    loc_vars = function(self)
        return {vars = {self.config.retriggers}}
    end
})'''
position = "at"
payload = '''SMODS.Edition{
    key = "watered",
    loc_txt = {
        name = "Watercoloured",
        label = "Watercoloured",
        text = {
            "Retrigger this card {C:attention}#1#{} times",
			'{C:dark_edition,s:0.7,E:2}Shader by : stupxd'
        }
    },
    discovered = true,
    unlocked = true,
    shader = 'watered',
    config = { retriggers = 2 },
	sound = {
		sound = 'jen_e_watered',
		per = 1,
		vol = 0.4
	},
    in_shop = true,
    weight = 8,
    extra_cost = 4,
    apply_to_float = false,
    loc_vars = function(self)
        return {vars = {self.config.retriggers}}
    end,
	calculate = function(self, card, context)
		local retriggers = self.config.retriggers
		if context.edition and context.cardarea == G.jokers and context.joker_main then
			return { retriggers = self.config.retriggers}
		end
		if context.repetition and context.cardarea == G.play then
			return {repetitions = self.config.retriggers}
		end
	end
}'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''SMODS.Edition({
    key = "reversed",
    loc_txt = {
        name = "Reversed",
        label = "Reversed",
        text = {
            '{C:chips}+#1#{} and {X:chips,C:white}x#2#{C:chips} Chips{},',
            '{C:mult}+#3#{} and {X:mult,C:white}x#4#{C:mult} Mult',
			'{C:dark_edition,s:0.7,E:2}Shader by : stupxd'
        }
    },
    discovered = true,
    unlocked = true,
	disable_base_shader = true,
	no_shadow = true,
    shader = 'reversed',
    config = { chips = 300, x_chips = 3, mult = 300, x_mult = 3 },
	sound = {
		sound = 'jen_e_reversed',
		per = 1,
		vol = 0.4
	},
    in_shop = true,
    weight = 0.1,
    extra_cost = 7,
    apply_to_float = false,
    loc_vars = function(self)
        return { vars = { self.config.chips, self.config.x_chips, self.config.mult, self.config.x_mult } }
    end
})'''
position = "at"
payload = '''SMODS.Edition{
    key = "reversed",
    loc_txt = {
        name = "Reversed",
        label = "Reversed",
        text = {
            '{C:chips}+#1#{} and {X:chips,C:white}x#2#{C:chips} Chips{},',
            '{C:mult}+#3#{} and {X:mult,C:white}x#4#{C:mult} Mult',
			'{C:dark_edition,s:0.7,E:2}Shader by : stupxd'
        }
    },
    discovered = true,
    unlocked = true,
	disable_base_shader = true,
	no_shadow = true,
    shader = 'reversed',
    config = { chips = 300, x_chips = 3, mult = 300, x_mult = 3 },
	sound = {
		sound = 'jen_e_reversed',
		per = 1,
		vol = 0.4
	},
    in_shop = true,
    weight = 0.1,
    extra_cost = 7,
    apply_to_float = false,
    loc_vars = function(self)
        return { vars = { self.config.chips, self.config.x_chips, self.config.mult, self.config.x_mult } }
    end,
	calculate = function(self, card, context)
		local chips = self.config.chips
		local x_chips = self.config.x_chips
		local mult = self.config.mult
		local x_mult = self.config.x_mult
		if context.edition and context.joker_main and context.cardarea == G.jokers then
			return {
				chips = self.config.chips,
				x_chips = self.config.x_chips,
				mult = self.config.mult,
				x_mult = self.config.x_mult
			}
		end
		if context.main_scoring and context.cardarea == G.play then
			return {
				chips = self.config.chips,
				x_chips = self.config.x_chips,
				mult = self.config.mult,
				x_mult = self.config.x_mult
			}
		end
	end
}'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''SMODS.Edition({
    key = "missingtexture",
    loc_txt = {
        name = "Missing Textures",
        label = "Missing Textures",
        text = {
            "{X:red,C:white}x#1#{C:red} Mult{}, {C:red,s:1.2}BUT",
			"{C:red}lose {C:money}$#2#{} when scored",
			'{C:inactive,S:0.7}Someone forgot to install Counter-Strike: Source...',
			'{C:dark_edition,s:0.7,E:2}Shader by : stupxd'
        }
    },
    discovered = true,
    unlocked = true,
    shader = 'missingtexture',
    config = { x_mult = 25, p_dollars = -5 },
	sound = {
		sound = 'jen_e_missingtexture',
		per = 1,
		vol = 0.6
	},
    in_shop = true,
    weight = 3,
    extra_cost = 7,
    apply_to_float = false,
    loc_vars = function(self)
        return { vars = { self.config.x_mult, math.abs(self.config.p_dollars) } }
    end
})'''
position = "at"
payload = '''SMODS.Edition{
    key = "missingtexture",
    loc_txt = {
        name = "Missing Textures",
        label = "Missing Textures",
        text = {
            "{X:red,C:white}x#1#{C:red} Mult{}, {C:red,s:1.2}BUT{}",
			"{C:red}lose {C:money}$#2#{} when scored",
			'{C:inactive,S:0.7}Someone forgot to install Counter-Strike: Source...',
			'{C:dark_edition,s:0.7,E:2}Shader by : stupxd'
        }
    },
    discovered = true,
    unlocked = true,
    shader = 'missingtexture',
    config = { x_mult = 25, p_dollars = -5 },
	sound = {
		sound = 'jen_e_missingtexture',
		per = 1,
		vol = 0.6
	},
    in_shop = true,
    weight = 3,
    extra_cost = 7,
    apply_to_float = false,
    loc_vars = function(self)
        return { vars = { self.config.x_mult, math.abs(self.config.p_dollars) } }
    end,
	calculate = function(self, card, context)
		local x_mult = self.config.x_mult
		local p_dollars = self.config.p_dollars
		if context.edition and context.joker_main and context.cardarea == G.jokers then
			return {
				x_mult = self.config.x_mult,
				p_dollars = self.config.p_dollars
			}
		end
		if context.main_scoring and context.cardarea == G.play then
			return {
				x_mult = self.config.x_mult,
				p_dollars = self.config.p_dollars
			}
		end
	end
}'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''SMODS.Edition({
    key = "bloodfoil",
    loc_txt = {
        name = "Bloodfoil",
        label = "Bloodfoil",
        text = {
            jl.tetchips('#1#') .. " Chips"
        }
    },
	misc_badge = {
		colour = G.C.RARITY['cry_exotic'],
		text = {
			"Exotic"
		}
	},
    shader = "bloodfoil",
    discovered = true,
    unlocked = true,
    config = {ee_chips = 1.2},
	sound = {
		sound = 'negative',
		per = 0.5,
		vol = 1
	},
    weight = 0.04,
    extra_cost = 30,
    apply_to_float = false,
	get_weight = function(self)
        return G.GAME.edition_rate * self.weight * (250 ^ #SMODS.find_card('j_jen_bulwark'))
    end,
    loc_vars = function(self)
        return { vars = { self.config.ee_chips } }
    end
})'''
position = "at"
payload = '''SMODS.Edition{
    key = "bloodfoil",
    loc_txt = {
        name = "Bloodfoil",
        label = "Bloodfoil",
        text = {
            "{X:jen_RGB,C:white,s:1.5}^^#1#{C:chips} Chips"
        }
    },
	misc_badge = {
		colour = G.C.RARITY['cry_exotic'],
		text = {
			"Exotic"
		}
	},
    shader = "bloodfoil",
    discovered = true,
    unlocked = true,
    config = {ee_chips = 1.2},
	sound = {
		sound = 'negative',
		per = 0.5,
		vol = 1
	},
    weight = 0.04,
    extra_cost = 30,
    apply_to_float = false,
	get_weight = function(self)
        return G.GAME.edition_rate * self.weight * (250 ^ #SMODS.find_card('j_jen_bulwark'))
    end,
    loc_vars = function(self)
        return { vars = { self.config.ee_chips } }
    end,
	calculate = function(self, card, context)
		local ee_chips = self.config.ee_chips
		if context.edition and context.cardarea == G.jokers and context.joker_main then
			return {
				ee_chips = self.config.ee_chips
			}
		end
		if context.cardarea == G.play and context.main_scoring then
			return {
				ee_chips = self.config.ee_chips
			}
		end
	end
}'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''SMODS.Edition({
    key = "blood",
    loc_txt = {
        name = "Blood",
        label = "Blood",
        text = {
            jl.tetmult('#1#') .. " Mult",
			'{C:dark_edition,s:0.7,E:2}Shader by : Oiiman'
        }
    },
    shader = "cosmic",
    discovered = true,
    unlocked = true,
    config = {ee_mult = 1.2},
	sound = {
		sound = 'negative',
		per = 0.5,
		vol = 1
	},
	misc_badge = {
		colour = G.C.RARITY['cry_exotic'],
		text = {
			"Exotic"
		}
	},
    weight = 0.04,
    extra_cost = 30,
    apply_to_float = false,
	get_weight = function(self)
        return G.GAME.edition_rate * self.weight * (250 ^ #SMODS.find_card('j_jen_bulwark'))
    end,
    loc_vars = function(self)
        return { vars = { self.config.ee_mult } }
    end
})'''
position = "at"
payload = '''SMODS.Edition {
    key = "blood",
    loc_txt = {
        name = "Blood",
        label = "Blood",
        text = {
            "{X:jen_RGB,C:white,s:1.5}^^#1#{C:mult} Mult",
			'{C:dark_edition,s:0.7,E:2}Shader by : Oiiman'
        }
    },
    shader = "cosmic",
    discovered = true,
    unlocked = true,
    config = {ee_mult = 1.2},
	sound = {
		sound = 'negative',
		per = 0.5,
		vol = 1
	},
	misc_badge = {
		colour = G.C.RARITY['cry_exotic'],
		text = {
			"Exotic"
		}
	},
    weight = 0.04,
    extra_cost = 30,
    apply_to_float = false,
	get_weight = function(self)
        return G.GAME.edition_rate * self.weight * (250 ^ #SMODS.find_card('j_jen_bulwark'))
    end,
    loc_vars = function(self)
        return { vars = { self.config.ee_mult } }
    end,
	calculate = function(self, card, context)
		local ee_mult = self.config.ee_mult
		if context.edition and context.cardarea == G.jokers and context.joker_main then
			return {
				ee_mult = self.config.ee_mult
			}
		end
		if context.cardarea == G.play and context.main_scoring then
			return {
				ee_mult = self.config.ee_mult
			}
		end
	end
}'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''SMODS.Edition({
    key = "moire",
    loc_txt = {
        name = "Moire",
        label = "Moire",
        text = {
			jl.pluschips('#1#') .. ', ' .. jl.mulchips('#2#') .. ', ' .. jl.expochips('#3#') .. ', ' .. jl.tetchips('#4#') .. ' & ' .. jl.penchips('#5#') .. ' Chips',
			jl.plusmult('#6#') .. ', ' .. jl.mulmult('#7#') .. ', ' .. jl.expomult('#8#') .. ', ' .. jl.tetmult('#9#') .. ' & ' .. jl.penmult('#10#') .. ' Mult',
			'{C:dark_edition,s:0.7,E:2}Shader by : Oiiman'
        }
    },
	misc_badge = {
		colour = G.C.jen_RGB,
		text = {
			"Wondrous"
		}
	},
    discovered = true,
    unlocked = true,
    shader = 'moire',
    config = { chips = math.pi*1e4, x_chips = math.pi*1e3, e_chips = math.pi*100, ee_chips = math.pi*10, eee_chips = math.pi, mult = math.pi*1e4, x_mult = math.pi*1e3, e_mult = math.pi*100, ee_mult = math.pi*10, eee_mult = math.pi },
	sound = {
		sound = 'jen_e_moire',
		per = 1,
		vol = 0.7
	},
    in_shop = true,
    weight = 0.01,
    extra_cost = math.pi*1e3,
    apply_to_float = false,
	get_weight = function(self)
        return G.GAME.edition_rate * self.weight * (250 ^ #SMODS.find_card('j_jen_bulwark'))
    end,
    loc_vars = function(self)
        return { vars = { self.config.chips, self.config.x_chips, self.config.e_chips, self.config.ee_chips, self.config.eee_chips, self.config.mult, self.config.x_mult, self.config.e_mult, self.config.ee_mult, self.config.eee_mult } }
    end
})'''
position = "at"
payload = '''SMODS.Edition{
    key = "moire",
    loc_txt = {
        name = "Moire",
        label = "Moire",
        text = {
            '{C:chips}+#1#{}, {X:chips,C:white}x#2#{}, {X:dark_edition,C:chips}^#3#{}, {X:jen_RGB,C:white,s:1.5}^^#4#{}, and {X:black,C:red}^^^#5#{C:chips} Chips',
            '{C:mult}+#1#{}, {X:mult,C:white}x#2#{}, {X:dark_edition,C:mult}^#3#{}, {X:jen_RGB,C:white,s:1.5}^^#4#{}, and {X:black,C:red}^^^#5#{C:mult} Mult',
			'{C:dark_edition,s:0.7,E:2}Shader by : Oiiman'
        }
    },
	misc_badge = {
		colour = G.C.jen_RGB,
		text = {
			"Wondrous"
		}
	},
    discovered = true,
    unlocked = true,
    shader = 'moire',
    config = { chips = math.pi*1e4, x_chips = math.pi*1e3, e_chips = math.pi*100, ee_chips = math.pi*10, eee_chips = math.pi, mult = math.pi*1e4, x_mult = math.pi*1e3, e_mult = math.pi*100, ee_mult = math.pi*10, eee_mult = math.pi },
	sound = {
		sound = 'jen_e_moire',
		per = 1,
		vol = 0.7
	},
    in_shop = true,
    weight = 0.01,
    extra_cost = math.pi*1e3,
    apply_to_float = false,
	get_weight = function(self)
        return G.GAME.edition_rate * self.weight * (250 ^ #SMODS.find_card('j_jen_bulwark'))
    end,
    loc_vars = function(self)
        return { vars = { self.config.chips, self.config.x_chips, self.config.e_chips, self.config.ee_chips, self.config.eee_chips, self.config.mult, self.config.x_mult, self.config.e_mult, self.config.ee_mult, self.config.eee_mult } }
    end,
	calculate = function(self, card, context)
		local chips = self.config.chips
		local mult = self.config.mult
		local x_chips = self.config.x_chips
		local x_mult = self.config.x_mult
		local e_chips = self.config.e_chips
		local e_mult = self.config.e_mult
		local ee_chips = self.config.ee_chips
		local ee_mult = self.config.ee_mult
		local eee_chips = self.config.eee_chips
		local eee_mult = self.config.eee_mult
		if context.edition and context.cardarea == G.jokers and context.joker_main then
			return {
				chips = chips * math.pi,
				mult = mult * math.pi,
				x_chips = x_chips * math.pi,
				x_mult = x_mult * math.pi,
				e_chips = e_chips * math.pi,
				e_mult = e_mult * math.pi,
				ee_chips = ee_chips * math.pi,
				ee_mult = ee_mult * math.pi,
				eee_chips = eee_chips * math.pi,
				eee_mult = eee_mult * math.pi
			}
		end
		if context.cardarea == G.play and context.main_scoring then
			return {
				chips = chips * math.pi,
				mult = mult * math.pi,
				x_chips = x_chips * math.pi,
				x_mult = x_mult * math.pi,
				e_chips = e_chips * math.pi,
				e_mult = e_mult * math.pi,
				ee_chips = ee_chips * math.pi,
				ee_mult = ee_mult * math.pi,
				eee_chips = eee_chips * math.pi,
				eee_mult = eee_mult * math.pi
			}
		end
	end
}'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''for k, v in pairs(G.GAME.hands) do
				if current_levels[k] > max_level then
					hands = {[k] = true}
					max_level = v.level
				elseif current_levels[k] == max_level then
					hands[k] = true
				end
			end'''
position = "at"
payload = '''for k, v in pairs(G.GAME.hands) do
				if current_levels[k] > to_big(max_level) then
					hands = {[k] = true}
					max_level = v.level
				elseif current_levels[k] == to_big(max_level) then
					hands[k] = true
				end
			end'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''use = function(self, card, area, copier)
		local fav = jl.favhand()
		local hands = jl.adjacenthands(fav)
		local lv = 0
		local levels_siphoned = 0
		if hands.backhand then
			if G.GAME.hands[hands.backhand].level > 0 then
				jl.th(hands.backhand)
				lv = G.GAME.hands[hands.backhand].level / 2
				level_up_hand(card, hands.backhand, nil, -lv)
				levels_siphoned = lv
			end
		end
		if hands.forehand then
			if G.GAME.hands[hands.forehand].level > 0 then
				jl.th(hands.forehand)
				lv = G.GAME.hands[hands.forehand].level / 2
				level_up_hand(card, hands.forehand, nil, -lv)
				levels_siphoned = levels_siphoned + lv
			end
		end
		card:do_jen_astronomy(fav, levels_siphoned)
		jl.th(fav)
		level_up_hand(card, fav, nil, levels_siphoned)
		jl.ch()
	end,
	bulk_use = function(self, card, area, copier, number)
		local fav = jl.favhand()
		local hands = jl.adjacenthands(fav)
		local lv = 0
		local levels_siphoned = 0
		local divisor = 1 / (2^(number-1))
		if hands.backhand then
			if G.GAME.hands[hands.backhand].level > 0 then
				jl.th(hands.backhand)
				lv = (G.GAME.hands[hands.backhand].level/2) / divisor
				level_up_hand(card, hands.backhand, nil, -lv)
				levels_siphoned = lv
			end
		end
		if hands.forehand then
			if G.GAME.hands[hands.forehand].level > 0 then
				jl.th(hands.forehand)
				lv = (G.GAME.hands[hands.forehand].level/2) / divisor
				level_up_hand(card, hands.forehand, nil, -lv)
				levels_siphoned = levels_siphoned + lv
			end
		end
		card:do_jen_astronomy(fav, levels_siphoned)
		jl.th(fav)
		level_up_hand(card, fav, nil, levels_siphoned)
		jl.ch()
	end'''
position = "at"
payload = '''use = function(self, card, area, copier)
		local fav = jl.favhand()
		local hands = jl.adjacenthands(fav)
		local lv = 0
		local levels_siphoned = 0
		if hands.backhand then
			if G.GAME.hands[hands.backhand].level > to_big(0) then
				jl.th(hands.backhand)
				lv = G.GAME.hands[hands.backhand].level / 2
				level_up_hand(card, hands.backhand, nil, -lv)
				levels_siphoned = lv
			end
		end
		if hands.forehand then
			if G.GAME.hands[hands.forehand].level > to_big(0) then
				jl.th(hands.forehand)
				lv = G.GAME.hands[hands.forehand].level / 2
				level_up_hand(card, hands.forehand, nil, -lv)
				levels_siphoned = levels_siphoned + lv
			end
		end
		card:do_jen_astronomy(fav, levels_siphoned)
		jl.th(fav)
		level_up_hand(card, fav, nil, levels_siphoned)
		jl.ch()
	end,
	bulk_use = function(self, card, area, copier, number)
		local fav = jl.favhand()
		local hands = jl.adjacenthands(fav)
		local lv = 0
		local levels_siphoned = 0
		local divisor = 1 / (2^(number-1))
		if hands.backhand then
			if G.GAME.hands[hands.backhand].level > to_big(0) then
				jl.th(hands.backhand)
				lv = (G.GAME.hands[hands.backhand].level/2) / divisor
				level_up_hand(card, hands.backhand, nil, -lv)
				levels_siphoned = lv
			end
		end
		if hands.forehand then
			if G.GAME.hands[hands.forehand].level > to_big(0) then
				jl.th(hands.forehand)
				lv = (G.GAME.hands[hands.forehand].level/2) / divisor
				level_up_hand(card, hands.forehand, nil, -lv)
				levels_siphoned = levels_siphoned + lv
			end
		end
		card:do_jen_astronomy(fav, levels_siphoned)
		jl.th(fav)
		level_up_hand(card, fav, nil, levels_siphoned)
		jl.ch()
	end'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''use = function(self, card, area, copier)
			local fav = jl.favhand()
			local hands = jl.adjacenthands(fav)
			local lv = 0
			local levels_siphoned = 0
			if hands.backhand then
				if G.GAME.hands[hands.backhand].level > to_big(0) then
					jl.th(hands.backhand)
					lv = G.GAME.hands[hands.backhand].level / 2
					level_up_hand(card, hands.backhand, nil, -lv)
					levels_siphoned = lv
				end
			end
			if hands.forehand then
				if G.GAME.hands[hands.forehand].level > to_big(0) then
					jl.th(hands.forehand)
					lv = G.GAME.hands[hands.forehand].level / 2
					level_up_hand(card, hands.forehand, nil, -lv)
					levels_siphoned = levels_siphoned + lv
				end
			end
			card:do_jen_astronomy(fav, levels_siphoned)
			jl.th(fav)
			level_up_hand(card, fav, nil, levels_siphoned)
			jl.ch()
		end,
		bulk_use = function(self, card, area, copier, number)
			local fav = jl.favhand()
			local hands = jl.adjacenthands(fav)
			local lv = 0
			local levels_siphoned = 0
			local divisor = 1 / (2^(number-1))
			if hands.backhand then
				if G.GAME.hands[hands.backhand].level > to_big(0) then
					jl.th(hands.backhand)
					lv = (G.GAME.hands[hands.backhand].level/2) / divisor
					level_up_hand(card, hands.backhand, nil, -lv)
					levels_siphoned = lv
				end
			end'''
position = "at"
payload = '''use = function(self, card, area, copier)
			local fav = jl.favhand()
			local hands = jl.adjacenthands(fav)
			local lv = 0
			local levels_siphoned = 0
			if hands.backhand then
				if to_big(G.GAME.hands[hands.backhand].level) > to_big(0) then
					jl.th(hands.backhand)
					lv = G.GAME.hands[hands.backhand].level / 2
					level_up_hand(card, hands.backhand, nil, -lv)
					levels_siphoned = lv
				end
			end
			if hands.forehand then
				if to_big(G.GAME.hands[hands.forehand].level) > to_big(0) then
					jl.th(hands.forehand)
					lv = G.GAME.hands[hands.forehand].level / 2
					level_up_hand(card, hands.forehand, nil, -lv)
					levels_siphoned = levels_siphoned + lv
				end
			end
			card:do_jen_astronomy(fav, levels_siphoned)
			jl.th(fav)
			level_up_hand(card, fav, nil, levels_siphoned)
			jl.ch()
		end,
		bulk_use = function(self, card, area, copier, number)
			local fav = jl.favhand()
			local hands = jl.adjacenthands(fav)
			local lv = 0
			local levels_siphoned = 0
			local divisor = 1 / (2^(number-1))
			if hands.backhand then
				if to_big(G.GAME.hands[hands.backhand].level) > to_big(0) then
					jl.th(hands.backhand)
					lv = (G.GAME.hands[hands.backhand].level/2) / divisor
					level_up_hand(card, hands.backhand, nil, -lv)
					levels_siphoned = lv
				end
			end'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''function Card:draw(layer)
	local CEN = self.gc and self:gc()
	if CEN then
		if (self.facing or '') == 'front' then
			if self.config then
				local should_scare = not CEN.cant_scare and ((Jen.gods() and CEN.fusable) or Jen.sinister)
				local should_scare2 = not CEN.cant_scare and ((Jen.gods() and CEN.fusable) or Jen.dramatic)
				if self.edition then
					if self.edition.jen_bismuth then
						self.edition.retriggers = bismuth_retriggers()
					end
				end
				if CEN.key == 'j_jen_dandy' and math.random(800) == 1 then
					self.dandy_glitch = math.random(10, 80)
					if self.children then
						if self.children.center then
							self.children.center:set_sprite_pos({x = 0, y = 1})
						end
						if self.children.floating_sprite then
							self.children.floating_sprite:set_sprite_pos({x = 1, y = 1})
						end
					end
				elseif self.dandy_glitch then
					if self.dandy_glitch <= 1 then
						if self.children then
							if self.children.center then
								self.children.center:set_sprite_pos({x = 0, y = 0})
							end
							if self.children.floating_sprite then
								self.children.floating_sprite:set_sprite_pos({x = 1, y = 0})
							end
						end
						self.dandy_glitch = nil
					else
						self.dandy_glitch = self.dandy_glitch - 1
					end
				end
				if not CEN.update and self.children.floating_sprite then
					if ((CEN.drama and should_scare2) or (CEN.sinis and should_scare)) and (CEN.sinis or CEN.drama) and not self.in_drama_state then
						self.in_drama_state = true
						self.children.floating_sprite:set_sprite_pos(CEN.drama or CEN.sinis)
					elseif not ((CEN.drama and should_scare2) or (CEN.sinis and should_scare)) and self.in_drama_state then
						self.in_drama_state = nil
						self.children.floating_sprite:set_sprite_pos(CEN.soul_pos)
					end
				end
				if self.in_drama_state then
					self:juice_up(0, math.random()/(Jen.dramatic and 3 or 6))
				end
				if self.area and next(self.area) then
					if self.ability and CEN.permaeternal and not self.ability.eternal and G.jokers and self.area == G.jokers then
						self.ability.eternal = true
					end
					if CEN.key == 'c_cry_pointer' and G.hand and self.area == G.hand and not self.lolnocryptidingpointerforyou then
						self.lolnocryptidingpointerforyou = true
						self:destroy()
						local pointer = create_card('Code', G.consumeables, nil, nil, nil, nil, 'c_cry_pointer', 'fuck_cryptiding_pointer_because_there_is_no_need_for_a_budget_creative_mode_please_come_the_fuck_on')
						pointer.no_omega = true
						pointer:add_to_deck()
						G.consumeables:emplace(pointer)
					end
				end
				if CEN.gloss then
					if CEN.gloss_contrast then
						for i = 1, CEN.gloss_contrast do
							self.children.center:draw_shader(type(CEN.gloss) == 'string' and CEN.gloss or 'voucher', nil, self.ARGS.send_to_shader)
						end
					else
						self.children.center:draw_shader(type(CEN.gloss) == 'string' and CEN.gloss or 'voucher', nil, self.ARGS.send_to_shader)
					end
				end
				if (self.added_to_deck or (self.area and self.area == G.hand)) and not self.edition then
					if not CEN.ignore_kudaai and Jen.kudaai_active and (CEN.set ~= 'Booster' or self.area == G.consumeables) and not CEN.cannot_edition then
						self:set_edition({[random_editions[pseudorandom('kudaai_edition', 1, #random_editions)]] = true}, true)
					end
				end
				if Jen.luke_active and self.ability and CEN.key ~= 'j_jen_hunter' and CEN.key ~= 'j_jen_luke' and CEN.set ~= 'jen_jokerability' then
					self.ability.cry_rigged = true
				end
			end
		else
			if CEN.key == 'c_cry_pointer' and G.hand and self.area == G.hand and not self.lolnocryptidingpointerforyou then
				self.lolnocryptidingpointerforyou = true
				self:destroy()
				local pointer = create_card('Code', G.consumeables, nil, nil, nil, nil, 'c_cry_pointer', 'fuck_cryptiding_pointer_because_there_is_no_need_for_a_budget_creative_mode_please_come_the_fuck_on')
				pointer.no_omega = true
				pointer:add_to_deck()
				G.consumeables:emplace(pointer)
			end
		end
	end
	CEN = nil
    card_draw_ref(self, layer)
end'''
position = "at"
payload = '''function Card:draw(layer)
	if (self.facing or '') == 'front' then
		if self.config then
			if self.edition then
				if self.edition.jen_bismuth then
					self.edition.retriggers = bismuth_retriggers()
				end
			end
			if Jen.sinister and G.hand then
				if (self.highlighted and (self.area or {}) == G.hand) or Jen.dramatic then
					self:juice_up(0, math.random()/4)
				end
			end
			if self.gc and self:gc() then
				local CEN = self:gc()
				if CEN.key == 'j_jen_dandy' and math.random(800) == 1 then
					self.dandy_glitch = math.random(10, 80)
					if self.children then
						if self.children.center then
							self.children.center:set_sprite_pos({x = 0, y = 1})
						end
						if self.children.floating_sprite then
							self.children.floating_sprite:set_sprite_pos({x = 1, y = 1})
						end
					end
				elseif self.dandy_glitch then
					if self.dandy_glitch <= 1 then
						if self.children then
							if self.children.center then
								self.children.center:set_sprite_pos({x = 0, y = 0})
							end
							if self.children.floating_sprite then
								self.children.floating_sprite:set_sprite_pos({x = 1, y = 0})
							end
						end
						self.dandy_glitch = nil
					else
						self.dandy_glitch = self.dandy_glitch - 1
					end
				end
				if not CEN.update and self.children.floating_sprite then
					if (CEN.drama and Jen.dramatic or Jen.sinister) and (CEN.sinis or CEN.drama) and not self.in_drama_state then
						self.in_drama_state = true
						self.children.floating_sprite:set_sprite_pos(CEN.drama or CEN.senis)
					elseif not Jen.sinister and self.in_drama_state then
						self.in_drama_state = nil
						self.children.floating_sprite:set_sprite_pos(CEN.soul_pos)
					end
				end
				if self.in_drama_state then
					self:juice_up(0, math.random()/4)
				end
				if self.area and next(self.area) then
					if self.ability and CEN.permaeternal and not self.ability.eternal and G.jokers and self.area == G.jokers then
						self.ability.eternal = true
					end
					if CEN.key == 'c_cry_pointer' and G.hand and self.area == G.hand and not self.lolnocryptidingpointerforyou then
						self.lolnocryptidingpointerforyou = true
						self:destroy()
						local pointer = create_card('Code', G.consumeables, nil, nil, nil, nil, 'c_cry_pointer', 'fuck_cryptiding_pointer_because_there_is_no_need_for_a_budget_creative_mode_please_come_the_fuck_on')
						pointer.no_omega = true
						pointer:add_to_deck()
						G.consumeables:emplace(pointer)
					end
				end
				if CEN.gloss then
					if CEN.gloss_contrast then
						for i = 1, CEN.gloss_contrast do
							self.children.center:draw_shader(type(CEN.gloss) == 'string' and CEN.gloss or 'voucher', nil, self.ARGS.send_to_shader)
						end
					else
						self.children.center:draw_shader(type(CEN.gloss) == 'string' and CEN.gloss or 'voucher', nil, self.ARGS.send_to_shader)
					end
				end
				if (self.added_to_deck or (self.area and self.area == G.hand)) and not self.edition then
					if Jen.kudaai_active and (CEN.set ~= 'Booster' or self.area == G.consumeables) and not CEN.cannot_edition then
						self:set_edition({[random_editions[pseudorandom('kudaai_edition', 1, #random_editions)]] = true}, true)
					end
				end
				if Jen.luke_active and self.ability and CEN.key ~= 'j_jen_hunter' and CEN.key ~= 'j_jen_luke' and CEN.set ~= 'jen_jokerability' then
					self.ability.cry_rigged = true
				end
				CEN = nil
			end
		end
	end
    card_draw_ref(self, layer)
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS jen "Jen.lua"]'''
pattern = '''SMODS.Joker {
	key = 'saint',
	loc_txt = {
		name = 'The Saint',
		text = {
			'{C:spectral}Gateway{} will {C:attention}not destroy Jokers{} when used',
			'After using {C:attention}' .. tostring(max_karma) .. ' {C:spectral}Gateways{}, {C:jen_RGB}attune{} this Joker',
			'{C:inactive,s:1.5}[{C:attention,s:1.5}#1#{C:inactive,s:1.5}/' .. tostring(max_karma) .. ']',
			faceart('jenwalter666'),
			origin('Rain World')
		}
	},
	config = {extra = {karma = 0}},
	pos = { x = 0, y = 0 },
	soul_pos = { x = 1, y = 0 },
	cost = 20,
	rarity = 4,
	unlocked = true,
	discovered = true,
	immutable = true,
	blueprint_compat = false,
	eternal_compat = true,
	perishable_compat = false,
	wee_incompatible = true,
	atlas = 'jensaint',
    loc_vars = function(self, info_queue, center)
        return {vars = {center.ability.extra.karma}}
    end,
	calculate = function(self, card, context)
        if not context.blueprint and jl.njr(context) and context.using_consumeable and context.consumeable and context.consumeable:gc().key == 'c_cry_gateway' then
			local quota = context.consumeable:getEvalQty()
			card.ability.extra.karma = card.ability.extra.karma + quota
			card_eval_status_text(card, 'extra', nil, nil, nil, {message = '+' .. quota .. ' Karma', colour = G.C.PALE_GREEN})
			card_eval_status_text(card, 'extra', nil, nil, nil, {message = (tostring(card.ability.extra.karma) .. ' / ' .. tostring(max_karma)), colour = G.C.GREEN})
			if card.ability.extra.karma >= max_karma then
				card_status_text(card, '!!!', nil, 0.05*card.T.h, G.C.DARK_EDITION, 0.6, 0.6, 2, 2, 'bm', 'jen_enlightened')
				G.E_MANAGER:add_event(Event({
					delay = 0.1,
					func = function()
						card:flip()
						play_sound('card1')
						return true
					end
				}))
				G.E_MANAGER:add_event(Event({
					delay = 1,
					func = function()
						card:flip()
						card:juice_up(1, 1)
						play_sound('card1')
						card:set_ability(G.P_CENTERS['j_jen_saint_attuned'])
						return true
					end
				}))
			end
        end
	end
}

SMODS.Joker {
	key = 'saint_attuned',
	loc_txt = {
		name = 'The Saint {C:jen_RGB}(Attuned)',
		text = {
			'{C:spectral}Gateway{} will {C:attention}not destroy Jokers{} when used',
			'{C:cry_ascendant}Yawetag{} also has {C:attention}no negative effect{} when used',
			'{X:black,C:red,s:3}^^^#1#{C:purple} Chips & Mult',
			faceart('jenwalter666'),
			origin('Rain World')
		}
	},
	config = {extra = {ascension = 3}},
	pos = { x = 0, y = 0 },
	soul_pos = { x = 2, y = 0 },
	cost = 100,
	rarity = 'jen_transcendent',
	unlocked = true,
	discovered = true,
	no_doe = true,
	immutable = true,
	blueprint_compat = true,
	eternal_compat = true,
	perishable_compat = false,
	atlas = 'jensaint',
    loc_vars = function(self, info_queue, center)
        return {vars = {center.ability.extra.ascension}}
    end,
	calculate = function(self, card, context)
		if context.cardarea == G.jokers and not context.before and not context.after then
			return {
				message = '^^^' .. card.ability.extra.ascension .. ' Chips & Mult',
				EEEmult_mod = card.ability.extra.ascension,
				EEEchip_mod = card.ability.extra.ascension,
				colour = G.C.BLACK,
				card = card
			}, true
		end
	end
}'''
position = "at"
payload = '''SMODS.Joker {
	key = 'saint',
	loc_txt = {
		name = 'The Saint',
		text = {
			'{C:spectral}Gateway{} will {C:attention}not destroy Jokers{} when used',
			'After using {C:attention}' .. tostring(max_karma) .. ' {C:spectral}Gateways{}, {C:jen_RGB}attune{} this Joker',
			'{C:inactive,s:1.5}[{C:attention,s:1.5}#1#{C:inactive,s:1.5}/' .. tostring(max_karma) .. ']',
			'{C:dark_edition,s:0.7,E:2}Face art by : jenwalter666',
			'{C:cry_exotic,s:0.7,E:2}Origin : Rain World'
		}
	},
	config = {extra = {karma = 0}},
	pos = { x = 0, y = 0 },
	soul_pos = { x = 1, y = 0 },
	cost = 20,
	rarity = 4,
	unlocked = true,
	discovered = true,
	immutable = true,
	blueprint_compat = false,
	eternal_compat = true,
	perishable_compat = false,
	atlas = 'jensaint',
    loc_vars = function(self, info_queue, center)
        return {vars = {center.ability.extra.karma}}
    end,
	calculate = function(self, card, context)
        if not context.blueprint and jl.njr(context) and context.using_consumeable and context.consumeable and context.consumeable:gc().key == 'c_cry_gateway' then
			local quota = context.consumeable:getEvalQty()
			card.ability.extra.karma = card.ability.extra.karma + quota
			card_eval_status_text(card, 'extra', nil, nil, nil, {message = '+' .. quota .. ' Karma', colour = G.C.PALE_GREEN})
			card_eval_status_text(card, 'extra', nil, nil, nil, {message = (tostring(card.ability.extra.karma) .. ' / ' .. tostring(max_karma)), colour = G.C.GREEN})
			if card.ability.extra.karma >= max_karma then
				card_status_text(card, '!!!', nil, 0.05*card.T.h, G.C.DARK_EDITION, 0.6, 0.6, 2, 2, 'bm', 'jen_enlightened')
				G.E_MANAGER:add_event(Event({
					delay = 0.1,
					func = function()
						card:flip()
						play_sound('card1')
						return true
					end
				}))
				G.E_MANAGER:add_event(Event({
					delay = 1,
					func = function()
						card:flip()
						card:juice_up(1, 1)
						play_sound('card1')
						card:set_ability(G.P_CENTERS['j_jen_saint_attuned'])
						return true
					end
				}))
			end
        end
	end
}

SMODS.Joker {
	key = 'saint_attuned',
	loc_txt = {
		name = 'The Saint {C:jen_RGB}(Attuned)',
		text = {
			'{C:spectral}Gateway{} will {C:attention}not destroy Jokers{} when used',
			'{C:cry_ascendant}Yawetag{} also has {C:attention}no negative effect{} when used',
			'{X:black,C:red,s:3}^^^#1#{C:purple} Chips & Mult',
			'{C:dark_edition,s:0.7,E:2}Face art by : jenwalter666',
			'{C:cry_exotic,s:0.7,E:2}Origin : Rain World'
		}
	},
	config = {extra = {ascension = 3}},
	pos = { x = 0, y = 0 },
	soul_pos = { x = 2, y = 0 },
	cost = 100,
	rarity = 'jen_transcendent',
	unlocked = true,
	discovered = true,
	no_doe = true,
	immutable = true,
	blueprint_compat = true,
	eternal_compat = true,
	perishable_compat = false,
	atlas = 'jensaint',
    loc_vars = function(self, info_queue, center)
        return {vars = {center.ability.extra.ascension}}
    end,
	calculate = function(self, card, context)
		if context.joker_main then
			return {
				message = '^^^' .. card.ability.extra.ascension .. ' Chips & Mult',
				EEEmult_mod = card.ability.extra.ascension,
				EEEchip_mod = card.ability.extra.ascension,
				colour = G.C.BLACK,
				card = card
			}, true
		end
	end
}'''
match_indent = true